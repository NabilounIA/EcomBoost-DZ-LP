#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

console.log('üöÄ D√©ploiement Vercel - EcomBoost DZ\n');

try {
  // 1. V√©rifier la configuration vercel.json
  console.log('üîç V√©rification de la configuration Vercel...');
  if (!fs.existsSync('vercel.json')) {
    console.error('‚ùå Fichier vercel.json manquant!');
    process.exit(1);
  }

  const vercelConfig = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
  
  // V√©rifier que la r√©√©criture SPA est pr√©sente
  const hasRewrite = vercelConfig.rewrites && 
    vercelConfig.rewrites.some(r => r.source === '/((?!api|_next|_static|_vercel|[\\w-]+\\.\\w+).*)'  && r.destination === '/index.html');
  
  if (!hasRewrite) {
    console.error('‚ùå Configuration de routage SPA manquante dans vercel.json!');
    process.exit(1);
  }
  
  console.log('‚úÖ Configuration Vercel OK');

  // 2. Build de production
  console.log('\n‚ö° Build de production...');
  execSync('npm run build:prod', { stdio: 'inherit' });

  // 3. V√©rifier que les fichiers de build existent
  console.log('\nüîç V√©rification des fichiers de build...');
  if (!fs.existsSync('dist/index.html')) {
    console.error('‚ùå Fichier dist/index.html manquant!');
    process.exit(1);
  }
  
  console.log('‚úÖ Fichiers de build OK');

  // 4. D√©ploiement Vercel
  console.log('\nüåê D√©ploiement sur Vercel...');
  
  // V√©rifier si Vercel CLI est install√©
  try {
    execSync('vercel --version', { stdio: 'pipe' });
  } catch (error) {
    console.log('üì¶ Installation de Vercel CLI...');
    execSync('npm install -g vercel', { stdio: 'inherit' });
  }

  // D√©ployer
  execSync('vercel --prod', { stdio: 'inherit' });

  console.log('\n‚úÖ D√©ploiement termin√© avec succ√®s!');
  console.log('üéâ Votre application est maintenant en ligne sur Vercel');
  
} catch (error) {
  console.error('\n‚ùå Erreur lors du d√©ploiement:', error.message);
  process.exit(1);
}